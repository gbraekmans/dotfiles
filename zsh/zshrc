#
# General
#
# If this is an xterminal, support 256-colors
[[ "${TERM:0:5}" = "xterm" ]] && TERM=xterm-256color
# Use colors
autoload -Uz colors && colors
# Use completion
autoload -Uz compinit && compinit
zstyle ':completion:*' menu yes select
zstyle ':completion:*' list-colors ''
# Set Vi/Vim as editor
if [ -x /usr/bin/vim ]; then
	export EDITOR=vim
else
	export EDITOR=vi
fi
# Never beep
setopt NO_BEEP
# Report statistics for every command taking over 2 seconds
TIMEFMT="$fg_bold[white]%J$reset_color, time: $fg_bold[red]%*Es$reset_color, cpu: $fg_bold[red]%P$reset_color, mem: $fg_bold[red]%Mmb$reset_color"
REPORTTIME=2

#
# History
#
# Don't save duplicates in history file
setopt HIST_IGNORE_DUPS
# Every shell has the same history file
setopt SHARE_HISTORY
# Don't store functions in the history file
setopt HIST_NO_FUNCTIONS
# Don't store history commands in the history file
setopt HIST_NO_STORE
# Don't store duplicate commands
setopt HIST_SAVE_NO_DUPS
# Set the history filesize large enough
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.history
# Configure history to use the current prefix as filter
autoload -Uz up-line-or-beginning-search
autoload -Uz down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
zmodload zsh/terminfo
# Bindkey, terminfo + fallback # https://github.com/zsh-users/zsh-history-substring-search/commit/c4a83561a12b898ff7145856d0e6ae50757e28ba
bindkey "$terminfo[kcuu1]" up-line-or-beginning-search
bindkey '^[[A' up-line-or-beginning-search
bindkey "$terminfo[kcud1]" down-line-or-beginning-search
bindkey '^[[B' down-line-or-beginning-search

#
# VCS info
#
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git svn cvs
zstyle ':vcs_info:*' formats "%b"

#
# Configure the prompt
#
setopt prompt_subst
# http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
# Show the current virtualenv on the right, prepend by space if set
PROMPT='%F{yellow}${VIRTUAL_ENV_NAME}%f${VIRTUAL_ENV_NAME:+ }'
# Use bold, bright colors. Display "user@host" in green for user, red for root
PROMPT+='%(!.%F{red}.%F{blue})%n@%m%f'
# If nested more than two directories display ellipsis, than display last two
# directories in cyan
PROMPT+=' %F{cyan}%3(~:…/:)%2~%f'
# Show the current vcs info on the right, prepend by space if set
PROMPT+='${vcs_info_msg_0_:+ }%F{magenta}${vcs_info_msg_0_}%f'
# Show the status of the last command, green for succes, red for failure
PROMPT+=' %(?.%F{green}✔.%F{red}✖)%f'
# Show the $ or # sign if user or root
PROMPT+=' %(!.#.\$) '

# Show the exit code in red if not zero
RPROMPT+='%(?.. %B%F{red}%?%f%b)'

virtualenv_info() {
	if [ -z "$VIRTUAL_ENV" ]; then
		VIRTUAL_ENV_NAME=""
		return 0
	fi
	# Assume the name is the same is the last directory
	VIRTUAL_ENV_NAME=${VIRTUAL_ENV##*/}
	# If it's a common name, use the parent's directory name
	case "${VIRTUAL_ENV_NAME}" in
		virtualenv|virtual_env|env|venv)
			VIRTUAL_ENV_NAME=${VIRTUAL_ENV%/*};
			VIRTUAL_ENV_NAME=${VIRTUAL_ENV_NAME##*/};
	esac
}

#
# Define all precmd's
#
precmd() {
	vcs_info
	virtualenv_info
	case ${TERM} in
		[aEkx]term*|rxvt*|gnome*|konsole*|interix)
			print -Pn "\e]0;zsh %~\a"
			;;
	esac
}

preexec() {
	case ${TERM} in
		[aEkx]term*|rxvt*|gnome*|konsole*|interix)
			printf "\033]0;%s\a" "$1"
			;;
	esac
}

# PYTHON: Support user pip installs
if [ -d $HOME/.local/bin ]; then
	PATH+=":$HOME/.local/bin"
fi
# Disable virtualenv prompt
export VIRTUAL_ENV_DISABLE_PROMPT=1

# RUBY: Support user gem installs
if [ -d $HOME/.gem/ruby ]; then
	for dir in $(ls $HOME/.gem/ruby); do
		PATH=$PATH:$HOME/.gem/ruby/$dir/bin
	done
fi

# HASKELL: Support user CABAL installs
if [ -d $HOME/.cabal/bin ]; then
	PATH+=":$HOME/.cabal/bin"
fi

# RUST: Support user cargo installs
if [ -d $HOME/.cargo/bin ]; then
	PATH+=":$HOME/.cargo/bin"
fi

#
# Add syntax highlighting if installed
#
if [ -e /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
	source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
elif [ -e $HOME/.zsh-plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
	source $HOME/.zsh-plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi
